$TILE-WIDTH: 140px;
$TILE-HEIGHT: 110px;

$BORDER-WIDTH: 4px;
$GRID-ROWS: 7;
$GRID-COLUMNS: 8;

$MOVE-DISTANCE-HORIZONTAL: $TILE-WIDTH - $BORDER-WIDTH;
$MOVE-DISTANCE-VERTICAL:  $TILE-HEIGHT - $BORDER-WIDTH;

$CONTAINER-MARGIN: 20px;
$CONTAINER-WIDTH: (($GRID-COLUMNS - 1) * $TILE-WIDTH) - (($GRID-COLUMNS - 1) * $BORDER-WIDTH);
$container-height: ($GRID-ROWS * $TILE-HEIGHT) - ($GRID-ROWS * $BORDER-WIDTH);

$MUNCHER-INDEX: 1;
$BOARD-INDEX: 2;
$TROGGLE-INDEX: 3;
$MENU-INDEX: 4;
$LOADING-INDEX: 5;

@mixin container {
	$newHeight: $GRID-ROWS - 1;

	width: $CONTAINER-WIDTH;
	height: ($newHeight * $TILE-HEIGHT) - ($newHeight * $BORDER-WIDTH);
	position: absolute;

	overflow: hidden;
}

@mixin emptyTileSize($width, $height) {
	width: $width;
	height: $height;
	vertical-align: top;
	border: 0 transparent;
}

@mixin transform($args...) {
	-webkit-transform: $args;
	   -moz-transform: $args;
			transform: $args;
}

@mixin transitionProperty {
	-webkit-transition: 200ms ease-in-out;
	   -moz-transition: 200ms ease-in-out;
			transition: 200ms ease-in-out;

	-webkit-transition-property: -webkit-transform;
	   -moz-transition-property: -moz-transform;
			transition-property: transform;
}


* { box-sizing: border-box; }

body {
	width: $CONTAINER-WIDTH;
	margin: 0 auto;
	color: white;
	background: black;
}

/*****************************************************
	Main Screen Menu
*****************************************************/
.main-screen {
	width: $CONTAINER-WIDTH;
	height: $container-height;
	position: absolute;
	z-index: $MENU-INDEX;

	text-align: center;
	background-color: black;

	display: none;

	h1 {
		margin-top: 150px;
		font-size: 5em;
	}

	ul {
		width: ($CONTAINER-WIDTH / 2);
		margin: 0 auto;
		font-size: 2em;
		list-style-type: none;

		li {
			margin-left: -$TILE-WIDTH/2;

			&.selected {
				background-color: white;
				color: black;
			}
		}
	}
}

/*****************************************************
	Loading Screen
*****************************************************/
.loading-screen {
	@include transitionProperty;

	width: $CONTAINER-WIDTH;
	height: $container-height;
	position: absolute;
	z-index: $LOADING-INDEX;
	overflow: hidden;

	$loading-height: (((($GRID-ROWS - 0.5) * $TILE-HEIGHT) + (($GRID-ROWS - 3) * $BORDER-WIDTH))  / ($GRID-ROWS * 2)) + $BORDER-WIDTH;
	$load-time: 3s;

	div {
		width: 100%;
		height: $loading-height;
		background-color: green;
		position: absolute;

		@for $i from 2 through (($GRID-ROWS * 2) - 1) {
			&:nth-child(#{$i}) { 
				$marginTop: (($i - 1) * $loading-height);
				@if $i > ($GRID-ROWS) {
					margin-top: $marginTop - 1px;
				} @else {
					margin-top: $marginTop;
				}
			}
		}

		&:nth-child(odd) {
			left: -$CONTAINER-WIDTH;
			&.load {
				-webkit-animation: loadingEven linear $load-time;
				   -moz-animation: loadingEven linear $load-time;
					-ms-animation: loadingEven linear $load-time;
					 -o-animation: loadingEven linear $load-time;
						animation: loadingEven linear $load-time;
			}
		}

		&:nth-child(even) {
			left: $CONTAINER-WIDTH;
			&.load {
				-webkit-animation: loadingOdd linear $load-time;
				   -moz-animation: loadingOdd linear $load-time;
					-ms-animation: loadingOdd linear $load-time;
					 -o-animation: loadingOdd linear $load-time;
						animation: loadingOdd linear $load-time;
			}
		}
	}
}

/*****************************************************
	Game Board: Board
*****************************************************/
.header {
	height: $TILE-HEIGHT;
	margin-bottom: 20px;
	margin-left: $TILE-WIDTH/2;

	.level {
		display: inline-block;
		width: $TILE-WIDTH - $BORDER-WIDTH;
		text-align: center;
		margin-top: 30px;
		vertical-align: top;

		span {
			font-size: 20pt;
			display: block;
		}
	}
	.game-mode {
		display: inline-block;
		margin: 20px 0;

		width: (($GRID-COLUMNS - 4) * $TILE-WIDTH) - (($GRID-COLUMNS - 3) * $BORDER-WIDTH) -  $BORDER-WIDTH;
		border-top: $BORDER-WIDTH solid red;
		border-bottom: $BORDER-WIDTH solid red;
		text-align: center;

		font-size: 15pt;
		line-height: 12pt;
	}
}

.game-container {
	@include container;
	margin-top: -$TILE-HEIGHT/2;
}

#grid {
	@include container;
	z-index: $BOARD-INDEX;

	.row {
		display:block;

		.tile {
			display: inline-block;
			position: relative;
			width: $TILE-WIDTH;
			height: $TILE-HEIGHT;
			
			border: $BORDER-WIDTH solid purple;

			margin-top: -$BORDER-WIDTH;
			margin-left: -$BORDER-WIDTH;
			vertical-align: top;

			.tile-inner {
				width: 80%;
				margin: 25% auto;
				text-align: center;
				font-size: 15pt;
				color: white;
			}

			&.emptyRow {
				@include emptyTileSize($TILE-WIDTH, $TILE-HEIGHT/2);
			}

			&.emptyCol {
				@include emptyTileSize($TILE-WIDTH/2, $TILE-HEIGHT);
			}

			&.emptyCorner {
				@include emptyTileSize($TILE-WIDTH/2, $TILE-HEIGHT/2);
			}
		}
	}
}
/* .tile:before {
content: '';
position:absolute;
top:-3px;
left:-3px; 
height:106px;
width:106px;
background-color: white;
border-radius: 25px;
} */

#extra-info {
	$newWidth: $GRID-COLUMNS - 2;
	$newHeight: $GRID-ROWS - 2;
	$height: ($newHeight * $TILE-HEIGHT) + ($newHeight * $BORDER-WIDTH / 4);

	width: ($newWidth * $TILE-WIDTH) - ($newWidth * $BORDER-WIDTH);
	margin-top: $height;
	margin-left: ($TILE-WIDTH / 2) - ($BORDER-WIDTH * 2);

	font-size: 30pt;

	div:first-child {
		display: inline-block;
		width: $TILE-WIDTH;
	}

	.score-container {
		display: inline-block;
		width: $TILE-WIDTH * 1.5;
		border: $BORDER-WIDTH solid blue;
		text-align: center;
	}
}


/*****************************************************
	Game Board: Muncher Board
*****************************************************/
#player-grid {
	@include container;
	z-index: $MUNCHER-INDEX;

	#muncher {
		position: absolute;
		width: $TILE-WIDTH - (2 * $BORDER-WIDTH);
		height: $TILE-HEIGHT - (2 * $BORDER-WIDTH);
		background: transparent url("/img/muncher.png") 0 0 no-repeat;	
		background-size: $TILE-WIDTH $TILE-HEIGHT;

		@include transitionProperty;
	}
}

/*****************************************************
	Game Board: Troggle Board;
*****************************************************/
.enemy-grid {
	@include container;
	z-index: $TROGGLE-INDEX;

	.troggle {
		position: absolute;
		width: $TILE-WIDTH - (2 * $BORDER-WIDTH);
		height: $TILE-HEIGHT - (2 * $BORDER-WIDTH);
		background-color: blue;

		@include transitionProperty;
	}
}


/*****************************************************
	Animations
*****************************************************/
/* .position-x-y : transformations from one tile to the next */
@for $x from 1 through $GRID-COLUMNS {
	@for $y from 1 through $GRID-ROWS {
		.position-#{$x}-#{$y} {
			$xPos: floor( ($x - 1) * $MOVE-DISTANCE-HORIZONTAL) - ($TILE-WIDTH/2);
			$yPos: floor( ($y - 1) * $MOVE-DISTANCE-VERTICAL) - ($TILE-HEIGHT/2);
			@include transform(translate($xPos, $yPos));

			/* if on the outer perimeter, hide troggle */
			@if $x == 1 or $x == $GRID-COLUMNS or $y == 1 or $y == $GRID-ROWS {
				display: none;
			} @else {
				display: block;
			}
		}
	}
}



/* Loading section goes from left to right */
@keyframes loadingEven {
	0% { left: -$CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: $CONTAINER-WIDTH; }
}

@-moz-keyframes loadingEven{
	0% { left: -$CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: $CONTAINER-WIDTH; }
}

@-webkit-keyframes loadingEven {
	0% { left: -$CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: $CONTAINER-WIDTH; }
}

@-o-keyframes loadingEven {
	0% { left: -$CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: $CONTAINER-WIDTH; }
}

@-ms-keyframes loadingEven {
	0% { left: -$CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: $CONTAINER-WIDTH; }
}



/* Loading section goes from right to left */
@keyframes loadingOdd {
	0% { left: $CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: -$CONTAINER-WIDTH; }
}

@-moz-keyframes loadingOdd{
	0% { left: $CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: -$CONTAINER-WIDTH; }
}

@-webkit-keyframes loadingOdd {
	0% { left: $CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: -$CONTAINER-WIDTH; }
}

@-o-keyframes loadingOdd {
	0% { left: $CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: -$CONTAINER-WIDTH; }
}

@-ms-keyframes loadingOdd {
	0% { left: $CONTAINER-WIDTH; }
	25%, 75% { left: 0px; }
	100% { left: -$CONTAINER-WIDTH; }
}